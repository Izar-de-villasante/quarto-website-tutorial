---
title: "Example data analysis"
author: "Angelika Merkel"
format: 
  html:
    toc: true
    self-contained: true
---

## 1. Import data

```{r}
#| eval: false

# load iris data set
data(iris)
```

## 2. Data QC and exploration

Once you have imported your data it is always a good idea to inspect your data object:

-   `head()` = displays the first parts of an object
-   `attributes()` = lists the attributes of an object
-   `str()` = displays the internal structure of an R object or a diagnostic function
-   RStudio viewer `view()`

You may need to adjust the way you import your data!

#### Now, you can start exploring your data

```{r}
#| eval: false

# basic summary statistics
summary(iris)

# density distribution
plot(density(iris$Sepal.Length))

# value distribution by group
boxplot(iris$Sepal.Length ~ iris$Species, col = c("black","red","green"))

# pairwise value plots
pairs(iris, col = iris$Species)
```

\

## 3. Data analysis

Lets find out how Sepal length and Petal length are related

```{r}
#| eval: false

# examine the relationship between Sepal and Petal Length
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)

# calculate Pearson correlation
cor.test(iris$Sepal.Length, iris$Petal.Length)

# => Great! Sepal.Length and Petal.Length are significantly positive correlated. Let's capture this
# insight in a nicer informative plot.


# FINAL PLOT
 
plot(iris$Sepal.Length, iris$Petal.Length,            # x variable, y variable
     col  = iris$Species,                             # colour by species
     pch  = 16,                                       # type of point to use
     xlab = "Sepal Length",                           # x axis label
     ylab = "Petal Length",                           # y axis label
     main = "Flower characteristics in Iris")         # plot title 

# legend with titles of iris$Species and colour 1:3, point type pch at coords (x,y)
legend("topleft", legend = levels(iris$Species), col = c(1:3), pch =16)

# text at coords (x,y) with label correlation test
text(x = 7.5, y = 2, labels = "cor = 0.871\np < 2.2e-16")
```

For more on basic R plots see [R Base Graphics: An Idiots Guide](https://rstudio-pubs-static.s3.amazonaws.com/7953_4e3efd5b9415444ca065b1167862c349.html)

## 4. Export results

After you have finished you analysis you may want so save your results for later:

Saving images

-   export with RStudio through Plots \>\> save
-   alternatively use jpeg(), png(), svg() or pdf()

```{r}
#| eval: false
 
# open graphics device
png(file = "my_plot.png", width = 480, height = 480)

# plot
plot(iris$Sepal.Length, iris$Petal.Length,            # x variable, y variable
     col  = iris$Species,                             # colour by species
     pch  = 16,                                       # type of point to use
     xlab = "Sepal Length",                           # x axis label
     ylab = "Petal Length",                           # y axis label
     main = "Flower characteristics in Iris")         # plot title 

# legend with titles of iris$Species and colour 1:3, point type pch at coords (x,y)
legend("topleft", legend = levels(iris$Species), col = c(1:3), pch =16)

# text at coords (x,y) with label correlation test
text(x = 7.5, y = 2, labels = "cor = 0.871\np < 2.2e-16")

# close the device
dev.off()
```

Functions for writing data to files

-   `write.table` or `write.csv` (writing tabular data to text files, i.e. CSV, or connections)
-   `writeLines`(writing character data line-by-line to a file or connection)
-   `save` (saving an arbitrary number of R objects in binary format (possibly compressed) to a file)
-   `saveRDS` save a data object in a compressed format

```{r}
#| eval: false

# write your results to a file
write.table(iris,                       # dataframe
            file = "results.csv",       # filename
            sep  = ";",                 # field seperator
            col.names = TRUE,           # include header (default = TRUE)
            row.names = FALSE,          # include row names (default = TRUE)
            quote = FALSE)              # quote characters and factors


# save multiple objects
save(iris, data, file = "my_two_objects.Rdata")

# save a single data object (compressed)
saveRDS(iris,                           #  data object
        file = "iris.rds")              #  file name

# save your workspace
save(file = "my_workspace_.Rdata")       # warning: this occupies the most space
```

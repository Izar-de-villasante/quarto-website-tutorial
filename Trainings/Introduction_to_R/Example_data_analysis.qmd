---
title: "Data analysis in R"
author: "Angelika Merkel"
format: 
  html:
    toc: true
    self-contained: true
---

## Import data

Let's try importing some data using some examples that come with the {readr} and {readxl} packages.

```{r}
#| eval: false
install.packages(c("readr","readxl"))


## tabular data (csv)

library(readr)

# retrieve local path
path_example1 <- readr_example("mtcars.csv")

# import the excel from the local path
data1 <- read_csv(path_example1)

## excel

library(readxl)

# retrieve local
path_example2 <- readxl_example("deaths.xls")

# import the excel from the local path
data2 <- read_xls(path_example2)
```

::: {.callout-tip style="fill: yellow" appearance="simple"}
## TIP

Try importing data with RStudio ( \> Workspace \> 'Environment' OR \> 'File' \> 'import)
:::

Be aware of common issues:

-   comments or empty line at the beginning or end of the file
-   spaces/commas/etc are used as field delimiters but also within cells (for example in a text string)
-   empty fields
-   special (including hidden) characters
-   special formatting (for example dates or geographical coordinates)

## Wrangle data

You may need to modify or transfor your data after you have imported it. This can be done with R{base}, but the dplyr package within the tidyverse provides very convinient and intuitive functions.

Data wrangling with {dplyr}: [R programming for Data science (D. Peng 2022): Chapter 12](https://bookdown.org/rdpeng/rprogdatascience/managing-data-frames-with-the-dplyr-package.html#data-frames-1)

## Quality control

It is always a good idea to inspect your data object

-   `head()` = display the first parts of an object
-   `view()` = view data in the RStudio viewer
-   `attributes()` = list the attributes of an object
-   `str()` = display the internal structure of an R object or a diagnostic function
-   `is.na()` = check for NA's

## Exploratory data analysis

We return to our trusted 'iris' data set

```{r}
#| eval: false
load(iris)
```

Let's start getting some summary statistics and visualize the distribution of our data to get a feel for it.

```{r}
#| eval: false

# basic summary statistics
summary(iris)

# histogram
hist(iris$Sepal.Length)

# density distribution
plot(density(iris$Sepal.Length))

# value distribution by group
boxplot(iris$Sepal.Length ~ iris$Species, col = c("black","red","green"))

# pairwise value plots
pairs(iris, col = iris$Species)
```

## Data analysis

Lets find out how Sepal length and Petal length are related

```{r}
#| eval: false

# examine the relationship between Sepal and Petal Length
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
```

It seem there is quite a correlation. Let's check

```{r}
#| eval: false

# calculate Pearson correlation
cor.test(iris$Sepal.Length, iris$Petal.Length)
```

## Visualization

Great! Sepal.Length and Petal.Length are significantly positive correlated. Let's capture this insight in a nicer informative plot.

```{r}
#| eval: false

# FINAL PLOT
 
plot(iris$Sepal.Length, iris$Petal.Length,            # x variable, y variable
     col  = iris$Species,                             # colour by species
     pch  = 16,                                       # type of point to use
     xlab = "Sepal Length",                           # x axis label
     ylab = "Petal Length",                           # y axis label
     main = "Flower characteristics in Iris")         # plot title 

# legend with titles of iris$Species and colour 1:3, point type pch at coords (x,y)
legend("topleft", legend = levels(iris$Species), col = c(1:3), pch =16)

# text at coords (x,y) with label correlation test
text(x = 7.5, y = 2, labels = "cor = 0.871\np < 2.2e-16")
```

For more on basic R plots see [R Base Graphics: An Idiots Guide](https://rstudio-pubs-static.s3.amazonaws.com/7953_4e3efd5b9415444ca065b1167862c349.html)

## Export results

After you have finished you analysis you may want so save your results for later:

**Saving images**

a)  Export with RStudio through Plots pane \>\> save
b)  Alternatively, in the console use jpeg(), png(), svg() or pdf()

```{r}
#| eval: false
 
# open graphics device
png(file = "my_plot.png", width = 480, height = 480)

# plot
plot(iris$Sepal.Length, iris$Petal.Length,            # x variable, y variable
     col  = iris$Species,                             # colour by species
     pch  = 16,                                       # type of point to use
     xlab = "Sepal Length",                           # x axis label
     ylab = "Petal Length",                           # y axis label
     main = "Flower characteristics in Iris")         # plot title 

# legend with titles of iris$Species and colour 1:3, point type pch at coords (x,y)
legend("topleft", legend = levels(iris$Species), col = c(1:3), pch =16)

# text at coords (x,y) with label correlation test
text(x = 7.5, y = 2, labels = "cor = 0.871\np < 2.2e-16")

# close the device
dev.off()
```

**Saving data**

-   `write.table` or `write.csv` (writing tabular data to text files, i.e. CSV, or connections)
-   `writeLines`(writing character data line-by-line to a file or connection)
-   `saveRDS` save a single data object in a compressed format
-   `save` (saving an arbitrary number of R objects in binary format (possibly compressed) to a file)

Let's save a results data frame in a comma delimited format (.csv) which is a common standard can be easily be opened by many application that can read text and tabular data (e.g. excel, libre office).

```{r}
#| eval: false

# write your results to a file
write.table(iris,                       # dataframe
            file = "results.csv",       # filename
            sep  = ";",                 # field seperator
            col.names = TRUE,           # include header (default = TRUE)
            row.names = FALSE,          # include row names (default = TRUE)
            quote = FALSE)              # quote characters and factors
```

You may also save objects for further use with R:

```{r}
#| eval: false

# save a single data object (compressed)
saveRDS(iris,                           #  data object
        file = "iris.rds")              #  file name


# save multiple objects from your workspace
save(iris, data, file = "my_two_objects.Rdata")


# save all objects in your workspace
save(file = "my_workspace.Rdata")       # warning: this occupies the most space
```

If you want to import these objects again to your R session:

```{r}
#| eval: false

readRDS("iris.rds")

load("my_workspace.Rdata")
```